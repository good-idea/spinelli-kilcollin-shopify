{% if shop.metafields.iglobal.enabled %}

  {% comment %}
  // When Zonos Hello is live, it will be loaded via the script tag below, 
  // which is wrapped in a check for the live setting.
  // If Zonos Hello is in test mode, then use the znLoadHello function to load Hello. 
  // This process ensures Hello can load fast when live and be hidden when in test mode
  {% endcomment %}

  {% if shop.metafields.iglobal.live == "true" %}
    <script src="https://hello.zonos.com/hello.js?siteKey={{ shop.metafields.iglobal.helloSiteKey }}"></script>
  {% endif %}

  {% comment %}
  // Place the .z-intl selector before the element you want to style.
  // .z-intl will style the selector to the specifications placed below when
  // Zonos Hello is on a non-domestic country.
  {% endcomment %}
  <style>.z-intl .additional-checkout-buttons, .z-intl .additional-checkout-button, .z-intl .gpay-iframe { display: none; }</style>

  {% if shop.metafields.iglobal.foreignCurrency == "true" %}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/arrive/2.4.1/arrive.min.js"></script>
  {% endif %}

  <script>
    var z_store = {
      store: "{{ shop.metafields.iglobal.store }}",
      live: {{ shop.metafields.iglobal.live | default: false }},
      foreignCurrency: {{ shop.metafields.iglobal.foreignCurrency | default: false }},
      currencySelectors: "{{ shop.metafields.iglobal.currencySelectors | default: '.money' }}",
      quoteProduct: {{ shop.metafields.zonos.quoteProduct | default: false }} && {% if product %} true {% else %} false {% endif %},
      quoteCart: {{ shop.metafields.zonos.quoteCart | default: false }},
      path: "{{ request.path }}",
      c: "{{ customer.id }}"
    };

  {% comment %}
    // The znLoadHello function loads Zonos Hello while in test mode and ensures that Hello
    // can be hidden when Hello is not live.
  {% endcomment %}
  function znLoadHello() {
    var script = document.createElement('script');
    script.src = "https://hello.zonos.com/hello.js?siteKey={{ shop.metafields.iglobal.helloSiteKey }}";
    document.head.appendChild(script);
  }

  const zTestModeUrlIndex = window.location.toString().indexOf('zTestMode');

  if (zTestModeUrlIndex !== -1) {
    const setTo = window.location.toString()[zTestModeUrlIndex + 10] === 't' ? 'true' : 'false';
    document.cookie = `zTestMode=${setTo}`;
  }

  const testModeParam = window.location.toString().indexOf('iGlobal=true') !== -1 || window.location.toString().indexOf('zonos=true') !== -1;
  const testModeCookie = document.cookie.indexOf('zTestMode=true') !== -1;
  if (!z_store.live && (testModeParam || testModeCookie)) {
    znLoadHello();
  }

  (function() {
    function n(n,i,t,e,o){for(i=document.cookie.split("; "),o={},e=i.length-1;e>=0;e--)t=i[e].split("="),o[t[0]]=t[1];return o[n]}
    typeof ga != 'undefined' && ga(function(t){z_store.clientId=t.get('clientId')});
    function h(){
      var _ajaxGet=function(t,e){var s=new XMLHttpRequest;s.open("GET",t,!0),s.onreadystatechange=function(){4===this.readyState&&this.status>=200&&this.status<400&&e(this.responseText)},s.send(),s=null};
      _ajaxGet('/cart.json',function(r){
      var f=document.createElement('form'),g='',d={cart:r,country:n("zCountry") || n("igCountry"),currency:n("zCurrency") || n("igCurrency"),c:z_store&&z_store.c};
      f.method='post';f.action='/a/iglobal/cart';
      for(var i in d){var a=document.createElement('input');a.type="hidden";a.name=i;a.value=d[i];f.appendChild(a);}document.querySelector('body').appendChild(f);f.submit();})
    }window.znCheckout=h

    {% comment %}
      In your Shopify theme files, place the onclick="zonosCheckout(event)" atrribute 
      on any buttons you would like to redirect to the Zonos International Checkout.
      If your button is a type submit inside a form, remove the type="submit" and put your submit code in the designated area.
    {% endcomment %} 
    zonosCheckout = function(event) {
      if ((n("zCountry") || n("igCountry")) && zonos && !zonos.isDomestic(n("zCountry") || n("igCountry"))) {
        if (event) {
          event.preventDefault();
          event.stopPropagation();
          event.stopImmediatePropagation();
        }
        znCheckout();
        return false;
      } else {
        window.location.href = '/checkout';
      }
    {% comment %}
      // Place your custom store checkout code here.
    {% endcomment %} 
    }

    {% comment %}
    // This function will help with currency conversion issues that your website might have as a result of having any product/cart price loaded via ajax.
    // It will listen for any ajax request and then call the currency conversion function 'zonos.display()' after the request, helping the currency conversion happen consistently. 
    // You do not need to enable this method if your site doesn't use ajax requests to load data.
    // This function doesn't interfere with any existing callback functions that are happening with the ajax requests. 
    // Alternatively, zonos.displayCurrency(); can be added into the callbacks of the product/cart loading if those locations are known.

    // Place the call for addListenerForXHR() in zonosCustomizations to make sure zonos is defined before calling zonos.displayCurrency

    function addListenerForXHR() {
      var oldXHR = window.XMLHttpRequest;

      function newXHR() {
        var realXHR = new oldXHR();
        realXHR.addEventListener("readystatechange", function() {
          if(realXHR.readyState==4 && realXHR.status==200){
            setTimeout(znDisplayCurrency, 500); // we want this to run after ajax requests.
          }
        }, false);
        return realXHR;
      }
      window.XMLHttpRequest = newXHR;
    }
    
    addListenerForXHR();
    {% endcomment %}

    function znDutyTaxEstimateOnDetailPage() {
      if (z_store.quoteProduct) {
        zonos.quote({
          items: [{ price: {{ product.price | divided_by: 100 }}, name: "{{product.title | replace: '"', '\"'}}", url: "{{ shop.secure_url }}{{ product.url }}", image: "https:{{ product.featured_image | product_img_url: 'medium' }}"}],
          currencyCode: '{{ shop.currency }}'
        });
      }
    }

    function znDutyTaxEstimateOnCartPage() {
      if (z_store.quoteCart && z_store.path.indexOf("cart") >= 0) {
        zonos.quote({
          items: [
            {% for item in cart.items %}
            { price: {{ item.price}} /100, quantity: {{item.quantity}}, name: "{{ item.title | replace: '"', '\"'}}", url: "{{ shop.secure_url }}{{item.url}}", image: "https:{{item.image| product_img_url: 'medium'}}"},
            {% endfor %}
          ],currencyCode: '{{ shop.currency }}'});
      }
    }

    function zonosCustomizations() {
      {% comment %}
      // All calls to Zonos should be made in this function to guarantee that Zonos hello has been loaded.
      {% endcomment %}
      znCurrencyConversionEnabled();

      znDutyTaxEstimateOnCartPage();
      znDutyTaxEstimateOnDetailPage();
    }

    {% comment %}
    // znCurrencyConversionEnabled waits for the money on the site to load and then converts them
    // that way there are no race conditions.
    // If you prefer to manually call znDisplayCurrency, then you can comment out this function.
    {% endcomment %}
    function znCurrencyConversionEnabled() {
      if (showForeignCurrency()) {
        znDisplayCurrency();
        document.arrive(z_store.currencySelectors, znDisplayCurrency);
        [].slice.call(document.querySelectorAll('.product-update-trigger')).forEach(function(elem) { 
          elem.setAttribute('onchange', 'setTimeout(znDisplayCurrency, 1000)');
        });
      }
    }

    function showForeignCurrency() {
      return z_store && z_store.foreignCurrency == true && z_store.currencySelectors;
    }

    {% comment %}
    // znDisplayCurrency can be called throughout the Shopify code. So if you want currency conversion to be more accurate,
    // add znDisplayCurrency() to any money HTML tags to call it directly. This will insure that converison happens as soon as money is loaded.
    // Add the following code: <script>window.onload = function() { znDisplayCurrency(); };</script>
    {% endcomment %}
    var intervalID = null;
    znDisplayCurrency = function() {
      if (showForeignCurrency()) {
        znSetCurrencySelectors();
      }
      if (zonos && zonos.config) {
        znSetCurrencySelectors();
        intervalID && clearInterval(intervalID);
      } else if (intervalID === null) {
        intervalID = setInterval(znDisplayCurrency, 100);
      }
    }

	function znCustomConverter(formatter, converter) {
      if (this.currencySelectors && this.currencySelectors.length > 0){
        var money = document.querySelectorAll(this.currencySelectors);
        for (var i = 0; i < money.length; i++) {
          var j = money[i];
          if (!j.textContent || j.textContent.indexOf("$0.00") >= 0) {
            continue;
          }
          if (!j.getAttribute('data-USD')) {
            j.setAttribute('data-USD', j.textContent.replace(/[^\d.]/g, ''));
          }
          j.setAttribute('data-zIntl', converter(j.getAttribute('data-USD')));
          j.textContent = formatter(j.getAttribute('data-USD'));
        }
      }
    }

    function znSetCurrencySelectors() {
      if (showForeignCurrency()) {
		zonos.config({currencyConverter: znCustomConverter});
        zonos.config({currencySelectors: z_store.currencySelectors});
      } else {
        zonos.config({currencySelectors: ""});
      }
    }

    {% comment %}
      // If your store has a sidecart that is not available in your Shopify 
      // theme files go to main.js, and add the following line to the bottom of
      // the Shopify.getCart function:
      // document.dispatchEvent(new CustomEvent("side-cart-loaded"));

      // Uncomment the following code and query the correct selector for your side cart 
      // checkout button.
      document.addEventListener('side-cart-loaded', function (e) { 
        document.querySelector('.cart-controls a[href*="/checkout"]').setAttribute("onclick", "zonosCheckout(event)");
      }, false);
    {% endcomment %}

    var listenForCountryChange = true;
    function zonosLoaded() {
      if (!listenForCountryChange) {
        document.removeEventListener ('z-country-change', zonosLoaded);
        return;
      }

      listenForCountryChange = false;
      zonosCustomizations();
    }

    function onPageLoad() {
      document.addEventListener('z-country-change', zonosLoaded);
    }
    
    onPageLoad();

  })();
  </script>

{% endif %}
